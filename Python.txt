
with Statement (Context Managers)
    Example
        f = open("Sample.txt", "w")
        try:
            f.write("Hello, World!")
        finally:
            f.close()
        
    Example
        with open("Sample.txt", "w") as f:
            f.write("Hello, World!")  

    How Does with Statement Work
        There are two methods that an object must support, in order to be used with the with statement.
        __enter__ and __exit__

        Example
            class ManagedFile:
                def __init__(self, name):
                    self.name = name
                
                def __enter__(self):
                    self.file = open(self.name, "w")
                    return self.file
                
                def __exit__(self, exc_type, exc_val, exc_tb):
                    if self.file:
                        self.file.close()

            with ManagedFile("hello.txt") as mf:
                mf.write("Hello, World!)
            
        When the object is called with the with statement, __enter__ method is called.
        When all the operations inside __enter__ is finished, __exit__ method is called and the resource is closed.
        When ManagedFile object is created without using the with statement, the __enter__ method will not run.
        For this reason the object is not going to be created.

        There is another way of implementing Context Manager
        Example
            from contextlib import contextmanager
            
            @contextmanager
            def managed_file(name):
                try:
                    f = open(name, "w")
                    yield f
                finally:
                    f.close()
            
            with managed_file("Sample.txt") as mf:
                mf.write("Hello, World!")
        
        